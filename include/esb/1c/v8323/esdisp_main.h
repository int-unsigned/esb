/*
	"ESB" is designed to create external native components for the 1C(tm) program.
	Copyright © 2023 IntUnsigned	(v8classes@gmail.com)
	"ESB" is free software under LGPLv2.1 license with essential restriction about binary part (view esb-license.txt)
	"ESB" IS DISTRIBUTED "AS-IS" WITHOUT ANY, EVEN THE IMPLIED, WARRANTY. IN NO EVENT SHALL THE AUTHORS OR THE COPYRIGHT OWNER BE LIABLE FOR ANY CLAIM, 
	DAMAGES OR OTHER LIABILITY ARISING OUT OF THE USE OF THIS SOFTWARE.
	THE AUTHOR DOES NOT GIVE ANY GUARANTEES AND DOES NOT BEAR ANY RESPONSIBILITY REGARDING THE USE OF 1C(tm) COMPONENTS PRODUCED USING THE ESB LIBRARY IN THE 1C(tm) ENVIRONMENT.
*/
#pragma once
#ifndef ESB_ESDISP_MAIN_H_
#define ESB_ESDISP_MAIN_H_

/*
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! AutoGenerated Dispinfo File 	!!
!! DO NOT EDIT					!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/
// platform ver v8.3.23.1688
#include "esdisp.h"


namespace esb {
	//
#define ESBLIB_TYPE(CLASS_EN_, ...)		class CLASS_EN_;
#define ESBLIB_ENUM(CLASS_EN_, ...)		ESBLIB_TYPE(CLASS_EN_)
#include "es1_main.def.h"


	namespace _internal
	{
		namespace _dispinfo
		{
			namespace _v8323
			{
				//insert here

				template<>
				struct EnumIdsFor<ColorDepth> {
					enum _ids_enum : dispix_t { BitPerPixel1, BitPerPixel4, BitPerPixel8, BitPerPixel24, BitPerPixel32 };
					static constexpr dispix_t _ids_enum_count = 5;
				};

template<>
struct EnumIdsFor<AddInType> {
enum _ids_enum : dispix_t {COM, Native};
static constexpr dispix_t _ids_enum_count = 2;
};
template<>
struct EnumIdsFor<AllowedLength> {
enum _ids_enum : dispix_t {Fixed, Variable};
static constexpr dispix_t _ids_enum_count = 2;
};
template<>
struct EnumIdsFor<AllowedSign> {
enum _ids_enum : dispix_t {Any, Nonnegative};
static constexpr dispix_t _ids_enum_count = 2;
};
template<>
struct EnumIdsFor<ColorType> {
enum _ids_enum : dispix_t {Absolute, StyleItem, WebColor, WindowsColor, AutoColor};
static constexpr dispix_t _ids_enum_count = 5;
};
template<>
struct EnumIdsFor<ControlBorderType> {
enum _ids_enum : dispix_t {WithoutBorder, Double, Single, Embossed, Indented, Underline, DoubleUnderline, Rounded, Overline};
static constexpr dispix_t _ids_enum_count = 9;
};
template<>
struct EnumIdsFor<DateFractions> {
enum _ids_enum : dispix_t {Date, Time, DateTime};
static constexpr dispix_t _ids_enum_count = 3;
};
template<>
struct EnumIdsFor<FontType> {
enum _ids_enum : dispix_t {Absolute, StyleItem, WindowsFont, AutoFont};
static constexpr dispix_t _ids_enum_count = 4;
};
template<>
struct EnumIdsFor<MessageStatus> {
enum _ids_enum : dispix_t {WithoutStatus, Ordinary, Information, Attention, Important, VeryImportant};
static constexpr dispix_t _ids_enum_count = 6;
};
template<>
struct EnumIdsFor<PictureFormat> {
enum _ids_enum : dispix_t {UnknownFormat, BMP, GIF, Icon, JPEG, PNG, TIFF, EMF, WMF, SVG};
static constexpr dispix_t _ids_enum_count = 10;
};
template<>
struct EnumIdsFor<PictureType> {
enum _ids_enum : dispix_t {Empty, FromLib, Absolute};
static constexpr dispix_t _ids_enum_count = 3;
};
template<>
struct EnumIdsFor<QuestionDialogMode> {
enum _ids_enum : dispix_t {OK, OKCancel, AbortRetryIgnore, YesNoCancel, YesNo, RetryCancel};
static constexpr dispix_t _ids_enum_count = 6;
};
template<>
struct EnumIdsFor<StringEncodingMethod> {
enum _ids_enum : dispix_t {URLEncoding, URLInURLEncoding};
static constexpr dispix_t _ids_enum_count = 2;
};
template<>
struct EnumIdsFor<BorderType> {
enum _ids_enum : dispix_t {Absolute, StyleItem};
static constexpr dispix_t _ids_enum_count = 2;
};
template<>
struct MethIdsFor<CompareValues> {
enum _ids_enum : dispix_t {Compare};
static constexpr dispix_t _ids_enum_count = 1;
};
template<>
struct PropIdsFor<CompareValues> {
// No Disp Properties.
};
template<>
struct MethIdsFor<NumberQualifiers> {
// No Disp Methods.
};
template<>
struct PropIdsFor<NumberQualifiers> {
enum _ids_enum : dispix_t {Digits, FractionDigits, AllowedSign};
static constexpr dispix_t _ids_enum_count = 3;
};
template<>
struct MethIdsFor<StringQualifiers> {
// No Disp Methods.
};
template<>
struct PropIdsFor<StringQualifiers> {
enum _ids_enum : dispix_t {Length, AllowedLength};
static constexpr dispix_t _ids_enum_count = 2;
};
template<>
struct MethIdsFor<DateQualifiers> {
// No Disp Methods.
};
template<>
struct PropIdsFor<DateQualifiers> {
enum _ids_enum : dispix_t {DateFractions};
static constexpr dispix_t _ids_enum_count = 1;
};
template<>
struct MethIdsFor<BinaryDataQualifiers> {
// No Disp Methods.
};
template<>
struct PropIdsFor<BinaryDataQualifiers> {
enum _ids_enum : dispix_t {Length, AllowedLength};
static constexpr dispix_t _ids_enum_count = 2;
};
template<>
struct MethIdsFor<TypeDescription> {
enum _ids_enum : dispix_t {Types, ContainsType, AdjustValue};
static constexpr dispix_t _ids_enum_count = 3;
};
template<>
struct PropIdsFor<TypeDescription> {
enum _ids_enum : dispix_t {NumberQualifiers, StringQualifiers, DateQualifiers, BinaryDataQualifiers};
static constexpr dispix_t _ids_enum_count = 4;
};
template<> inline constexpr bool is_typeinfo_singleton<CommandInterfaceCommand> = false;
template<>
struct MethIdsFor<CommandInterfaceCommand> {
// No Disp Methods.
};
template<>
struct PropIdsFor<CommandInterfaceCommand> {
enum _ids_enum : dispix_t {ThisObject};
static constexpr dispix_t _ids_enum_count = 1;
};
template<>
struct MethIdsFor<CommonModule> {
// No Disp Methods.
};
template<>
struct PropIdsFor<CommonModule> {
// No Disp Properties.
};
template<>
struct MethIdsFor<CallbackDescription> {
// No Disp Methods.
};
template<>
struct PropIdsFor<CallbackDescription> {
enum _ids_enum : dispix_t {ProcedureName, Module, AdditionalParameters, ErrorHandlerProcedureName, ErrorHandlerModule};
static constexpr dispix_t _ids_enum_count = 5;
};
template<>
struct MethIdsFor<Border> {
// No Disp Methods.
};
template<>
struct PropIdsFor<Border> {
enum _ids_enum : dispix_t {BorderType, Width, Type};
static constexpr dispix_t _ids_enum_count = 3;
};
template<>
struct MethIdsFor<Color> {
enum _ids_enum : dispix_t {GetAbsolute};
static constexpr dispix_t _ids_enum_count = 1;
};
template<>
struct PropIdsFor<Color> {
enum _ids_enum : dispix_t {R, G, B, Type};
static constexpr dispix_t _ids_enum_count = 4;
};
template<>
struct MethIdsFor<Picture> {
enum _ids_enum : dispix_t {Write, FileNameFilter, Convert, Format, Width, Height, ColorDepth, GrayScale, HorizontalDensity, VerticalDensity, FileSize, GetBinaryData, FrameCount};
static constexpr dispix_t _ids_enum_count = 13;
};
template<>
struct PropIdsFor<Picture> {
enum _ids_enum : dispix_t {Type, VariantSet};
static constexpr dispix_t _ids_enum_count = 2;
};
template<>
struct MethIdsFor<Font> {
enum _ids_enum : dispix_t {GetAbsolute};
static constexpr dispix_t _ids_enum_count = 1;
};
template<>
struct PropIdsFor<Font> {
enum _ids_enum : dispix_t {Name, Size, Bold, Italic, Underline, Strikeout, Type, Scale};
static constexpr dispix_t _ids_enum_count = 8;
};
template<>
struct MethIdsFor<FormattedString> {
// No Disp Methods.
};
template<>
struct PropIdsFor<FormattedString> {
// No Disp Properties.
};


			} // end namespace _v8323
		} // end namespace _dispinfo
	}// end namespace _internal
} // end namespace esb

#endif	//ESB_ESDISP_MAIN_H_